{
  "address": "0x98e34A7e69fa7E6b1EfA325b9a4Bb572D77C2D91",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_descartesIndex",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_author",
          "type": "address"
        }
      ],
      "name": "GameChallenged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "_fundsShare",
          "type": "uint256[]"
        }
      ],
      "name": "GameOver",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "gameTemplateHash",
              "type": "bytes32"
            },
            {
              "internalType": "bytes",
              "name": "gameMetadata",
              "type": "bytes"
            },
            {
              "internalType": "address[]",
              "name": "validators",
              "type": "address[]"
            },
            {
              "internalType": "address[]",
              "name": "players",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "playerFunds",
              "type": "uint256[]"
            },
            {
              "internalType": "bytes[]",
              "name": "playerInfos",
              "type": "bytes[]"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "player",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "timestamp",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256[]",
                  "name": "dataLogIndices",
                  "type": "uint256[]"
                }
              ],
              "internalType": "struct Turn[]",
              "name": "turns",
              "type": "tuple[]"
            },
            {
              "internalType": "bool",
              "name": "isDescartesInstantiated",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "descartesIndex",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "claimer",
              "type": "address"
            },
            {
              "internalType": "uint256[]",
              "name": "claimedFundsShare",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256",
              "name": "claimAgreementMask",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct GameContext",
          "name": "_context",
          "type": "tuple"
        }
      ],
      "name": "GameReady",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "_fundsShare",
          "type": "uint256[]"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_author",
          "type": "address"
        }
      ],
      "name": "GameResultClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_turnIndex",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "player",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256[]",
              "name": "dataLogIndices",
              "type": "uint256[]"
            }
          ],
          "indexed": false,
          "internalType": "struct Turn",
          "name": "_turn",
          "type": "tuple"
        }
      ],
      "name": "TurnOver",
      "type": "event"
    }
  ],
  "transactionHash": "0xb7c6a420550bda93e4b8f05343bd74707f517eddcec64a76cfafa12ffa93c1a5",
  "receipt": {
    "to": null,
    "from": "0xF05D57a5BeD2d1B529C56001FC5810cc9afC0335",
    "contractAddress": "0x98e34A7e69fa7E6b1EfA325b9a4Bb572D77C2D91",
    "transactionIndex": 0,
    "gasUsed": "3686465",
    "logsBloom": "0x
    "blockHash": "0x70049df5d8942b97e626e8add0940ec34e45e4c565f77a10bce20e2cdc93fd88",
    "transactionHash": "0xb7c6a420550bda93e4b8f05343bd74707f517eddcec64a76cfafa12ffa93c1a5",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 14946775,
        "transactionHash": "0xb7c6a420550bda93e4b8f05343bd74707f517eddcec64a76cfafa12ffa93c1a5",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000f05d57a5bed2d1b529c56001fc5810cc9afc0335",
          "0x000000000000000000000000c275dc8be39f50d12f66b6a63629c39da5bae5bd"
        ],
        "data": "0x000000000000000000000000000000000000000000000000005badbe219d06000000000000000000000000000000000000000000000000000e7d1367fef74400000000000000000000000000000000000000000000000096a307b0d91c23b4990000000000000000000000000000000000000000000000000e2165a9dd5a3e00000000000000000000000000000000000000000000000096a3635e973dc0ba99",
        "logIndex": 0,
        "blockHash": "0x70049df5d8942b97e626e8add0940ec34e45e4c565f77a10bce20e2cdc93fd88"
      }
    ],
    "blockNumber": 14946775,
    "cumulativeGasUsed": "3686465",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "fb9352d7420fec23812161acb4cf722a",
  "metadata": "{\"compiler\":{\"version\":\"0.7.4+commit.3f05b770\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_descartesIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_author\",\"type\":\"address\"}],\"name\":\"GameChallenged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_fundsShare\",\"type\":\"uint256[]\"}],\"name\":\"GameOver\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"gameTemplateHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"gameMetadata\",\"type\":\"bytes\"},{\"internalType\":\"address[]\",\"name\":\"validators\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"players\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"playerFunds\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"playerInfos\",\"type\":\"bytes[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"dataLogIndices\",\"type\":\"uint256[]\"}],\"internalType\":\"struct Turn[]\",\"name\":\"turns\",\"type\":\"tuple[]\"},{\"internalType\":\"bool\",\"name\":\"isDescartesInstantiated\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"descartesIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"claimedFundsShare\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"claimAgreementMask\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct GameContext\",\"name\":\"_context\",\"type\":\"tuple\"}],\"name\":\"GameReady\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_fundsShare\",\"type\":\"uint256[]\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_author\",\"type\":\"address\"}],\"name\":\"GameResultClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_turnIndex\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"dataLogIndices\",\"type\":\"uint256[]\"}],\"indexed\":false,\"internalType\":\"struct Turn\",\"name\":\"_turn\",\"type\":\"tuple\"}],\"name\":\"TurnOver\",\"type\":\"event\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"applyResult(GameContext storage,uint256,uint256[])\":{\"params\":{\"_context\":\"game context\",\"_fundsShare\":\"result of the game given as a distribution of the funds previously locked\",\"_index\":\"index identifying the game\"}},\"applyVerificationResult(GameContext storage,uint256,DescartesInterface)\":{\"params\":{\"_context\":\"game context\",\"_descartes\":\"Descartes instance used for triggering verified computations\",\"_index\":\"index identifying the game\"}},\"challengeGame(GameContext storage,uint256,DescartesInterface,Logger,uint8,uint256)\":{\"params\":{\"_context\":\"game context\",\"_descartes\":\"Descartes instance used for triggering verified computations\",\"_index\":\"index identifying the game\",\"_logger\":\"Logger instance used for storing data in the event history\",\"_turnChunkLog2Size\":\"turn data log2size considering 64-bit words (i.e., how many 64-bit words are there in a chunk of turn data)\"},\"returns\":{\"_0\":\"index of the Descartes computation\"}},\"claimResult(GameContext storage,uint256,uint256[])\":{\"params\":{\"_context\":\"game context\",\"_fundsShare\":\"result of the game given as a distribution of the funds previously locked\",\"_index\":\"index identifying the game\"}},\"confirmResult(GameContext storage)\":{\"params\":{\"_context\":\"game context\"},\"returns\":{\"_isConsensus\":\"boolean indicating whether all players have agreed with the claim\"}},\"submitTurn(GameContext storage,uint256,uint256,bytes,Logger,uint8)\":{\"params\":{\"_context\":\"game context\",\"_data\":\"game-specific turn data (array of 64-bit words)\",\"_index\":\"index identifying the game\",\"_logger\":\"Logger instance used for storing data in the event history\",\"_turnChunkLog2Size\":\"turn data log2size considering 64-bit words (i.e., how many 64-bit words are there in a chunk of turn data)\",\"_turnIndex\":\"a sequential number for the turn, which must be equal to the last submitted turn's index + 1\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"applyResult(GameContext storage,uint256,uint256[])\":{\"notice\":\"Applies the results of a game, transferring locked funds according to the provided distribution\"},\"applyVerificationResult(GameContext storage,uint256,DescartesInterface)\":{\"notice\":\"Applies the result of a game verified by Descartes, transferring funds according to the Descartes computation output\"},\"challengeGame(GameContext storage,uint256,DescartesInterface,Logger,uint8,uint256)\":{\"notice\":\"Challenges game state, triggering a verification by a Descartes computation\"},\"claimResult(GameContext storage,uint256,uint256[])\":{\"notice\":\"Claims game has ended with the provided result (share of locked funds)\"},\"confirmResult(GameContext storage)\":{\"notice\":\"Confirms game results previously claimed\"},\"submitTurn(GameContext storage,uint256,uint256,bytes,Logger,uint8)\":{\"notice\":\"Submits a new turn for a given game\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TurnBasedGameContext.sol\":\"TurnBasedGameContext\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@cartesi/descartes-sdk/contracts/DescartesInterface.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n//                                  Apache License\\n//                            Version 2.0, January 2004\\n//                         http://www.apache.org/licenses/\\n\\n//    TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\\n\\n//    1. Definitions.\\n\\n//       \\\"License\\\" shall mean the terms and conditions for use, reproduction,\\n//       and distribution as defined by Sections 1 through 9 of this document.\\n\\n//       \\\"Licensor\\\" shall mean the copyright owner or entity authorized by\\n//       the copyright owner that is granting the License.\\n\\n//       \\\"Legal Entity\\\" shall mean the union of the acting entity and all\\n//       other entities that control, are controlled by, or are under common\\n//       control with that entity. For the purposes of this definition,\\n//       \\\"control\\\" means (i) the power, direct or indirect, to cause the\\n//       direction or management of such entity, whether by contract or\\n//       otherwise, or (ii) ownership of fifty percent (50%) or more of the\\n//       outstanding shares, or (iii) beneficial ownership of such entity.\\n\\n//       \\\"You\\\" (or \\\"Your\\\") shall mean an individual or Legal Entity\\n//       exercising permissions granted by this License.\\n\\n//       \\\"Source\\\" form shall mean the preferred form for making modifications,\\n//       including but not limited to software source code, documentation\\n//       source, and configuration files.\\n\\n//       \\\"Object\\\" form shall mean any form resulting from mechanical\\n//       transformation or translation of a Source form, including but\\n//       not limited to compiled object code, generated documentation,\\n//       and conversions to other media types.\\n\\n//       \\\"Work\\\" shall mean the work of authorship, whether in Source or\\n//       Object form, made available under the License, as indicated by a\\n//       copyright notice that is included in or attached to the work\\n//       (an example is provided in the Appendix below).\\n\\n//       \\\"Derivative Works\\\" shall mean any work, whether in Source or Object\\n//       form, that is based on (or derived from) the Work and for which the\\n//       editorial revisions, annotations, elaborations, or other modifications\\n//       represent, as a whole, an original work of authorship. For the purposes\\n//       of this License, Derivative Works shall not include works that remain\\n//       separable from, or merely link (or bind by name) to the interfaces of,\\n//       the Work and Derivative Works thereof.\\n\\n//       \\\"Contribution\\\" shall mean any work of authorship, including\\n//       the original version of the Work and any modifications or additions\\n//       to that Work or Derivative Works thereof, that is intentionally\\n//       submitted to Licensor for inclusion in the Work by the copyright owner\\n//       or by an individual or Legal Entity authorized to submit on behalf of\\n//       the copyright owner. For the purposes of this definition, \\\"submitted\\\"\\n//       means any form of electronic, verbal, or written communication sent\\n//       to the Licensor or its representatives, including but not limited to\\n//       communication on electronic mailing lists, source code control systems,\\n//       and issue tracking systems that are managed by, or on behalf of, the\\n//       Licensor for the purpose of discussing and improving the Work, but\\n//       excluding communication that is conspicuously marked or otherwise\\n//       designated in writing by the copyright owner as \\\"Not a Contribution.\\\"\\n\\n//       \\\"Contributor\\\" shall mean Licensor and any individual or Legal Entity\\n//       on behalf of whom a Contribution has been received by Licensor and\\n//       subsequently incorporated within the Work.\\n\\n//    2. Grant of Copyright License. Subject to the terms and conditions of\\n//       this License, each Contributor hereby grants to You a perpetual,\\n//       worldwide, non-exclusive, no-charge, royalty-free, irrevocable\\n//       copyright license to reproduce, prepare Derivative Works of,\\n//       publicly display, publicly perform, sublicense, and distribute the\\n//       Work and such Derivative Works in Source or Object form.\\n\\n//    3. Grant of Patent License. Subject to the terms and conditions of\\n//       this License, each Contributor hereby grants to You a perpetual,\\n//       worldwide, non-exclusive, no-charge, royalty-free, irrevocable\\n//       (except as stated in this section) patent license to make, have made,\\n//       use, offer to sell, sell, import, and otherwise transfer the Work,\\n//       where such license applies only to those patent claims licensable\\n//       by such Contributor that are necessarily infringed by their\\n//       Contribution(s) alone or by combination of their Contribution(s)\\n//       with the Work to which such Contribution(s) was submitted. If You\\n//       institute patent litigation against any entity (including a\\n//       cross-claim or counterclaim in a lawsuit) alleging that the Work\\n//       or a Contribution incorporated within the Work constitutes direct\\n//       or contributory patent infringement, then any patent licenses\\n//       granted to You under this License for that Work shall terminate\\n//       as of the date such litigation is filed.\\n\\n//    4. Redistribution. You may reproduce and distribute copies of the\\n//       Work or Derivative Works thereof in any medium, with or without\\n//       modifications, and in Source or Object form, provided that You\\n//       meet the following conditions:\\n\\n//       (a) You must give any other recipients of the Work or\\n//           Derivative Works a copy of this License; and\\n\\n//       (b) You must cause any modified files to carry prominent notices\\n//           stating that You changed the files; and\\n\\n//       (c) You must retain, in the Source form of any Derivative Works\\n//           that You distribute, all copyright, patent, trademark, and\\n//           attribution notices from the Source form of the Work,\\n//           excluding those notices that do not pertain to any part of\\n//           the Derivative Works; and\\n\\n//       (d) If the Work includes a \\\"NOTICE\\\" text file as part of its\\n//           distribution, then any Derivative Works that You distribute must\\n//           include a readable copy of the attribution notices contained\\n//           within such NOTICE file, excluding those notices that do not\\n//           pertain to any part of the Derivative Works, in at least one\\n//           of the following places: within a NOTICE text file distributed\\n//           as part of the Derivative Works; within the Source form or\\n//           documentation, if provided along with the Derivative Works; or,\\n//           within a display generated by the Derivative Works, if and\\n//           wherever such third-party notices normally appear. The contents\\n//           of the NOTICE file are for informational purposes only and\\n//           do not modify the License. You may add Your own attribution\\n//           notices within Derivative Works that You distribute, alongside\\n//           or as an addendum to the NOTICE text from the Work, provided\\n//           that such additional attribution notices cannot be construed\\n//           as modifying the License.\\n\\n//       You may add Your own copyright statement to Your modifications and\\n//       may provide additional or different license terms and conditions\\n//       for use, reproduction, or distribution of Your modifications, or\\n//       for any such Derivative Works as a whole, provided Your use,\\n//       reproduction, and distribution of the Work otherwise complies with\\n//       the conditions stated in this License.\\n\\n//    5. Submission of Contributions. Unless You explicitly state otherwise,\\n//       any Contribution intentionally submitted for inclusion in the Work\\n//       by You to the Licensor shall be under the terms and conditions of\\n//       this License, without any additional terms or conditions.\\n//       Notwithstanding the above, nothing herein shall supersede or modify\\n//       the terms of any separate license agreement you may have executed\\n//       with Licensor regarding such Contributions.\\n\\n//    6. Trademarks. This License does not grant permission to use the trade\\n//       names, trademarks, service marks, or product names of the Licensor,\\n//       except as required for reasonable and customary use in describing the\\n//       origin of the Work and reproducing the content of the NOTICE file.\\n\\n//    7. Disclaimer of Warranty. Unless required by applicable law or\\n//       agreed to in writing, Licensor provides the Work (and each\\n//       Contributor provides its Contributions) on an \\\"AS IS\\\" BASIS,\\n//       WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\\n//       implied, including, without limitation, any warranties or conditions\\n//       of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\\n//       PARTICULAR PURPOSE. You are solely responsible for determining the\\n//       appropriateness of using or redistributing the Work and assume any\\n//       risks associated with Your exercise of permissions under this License.\\n\\n//    8. Limitation of Liability. In no event and under no legal theory,\\n//       whether in tort (including negligence), contract, or otherwise,\\n//       unless required by applicable law (such as deliberate and grossly\\n//       negligent acts) or agreed to in writing, shall any Contributor be\\n//       liable to You for damages, including any direct, indirect, special,\\n//       incidental, or consequential damages of any character arising as a\\n//       result of this License or out of the use or inability to use the\\n//       Work (including but not limited to damages for loss of goodwill,\\n//       work stoppage, computer failure or malfunction, or any and all\\n//       other commercial damages or losses), even if such Contributor\\n//       has been advised of the possibility of such damages.\\n\\n//    9. Accepting Warranty or Additional Liability. While redistributing\\n//       the Work or Derivative Works thereof, You may choose to offer,\\n//       and charge a fee for, acceptance of support, warranty, indemnity,\\n//       or other liability obligations and/or rights consistent with this\\n//       License. However, in accepting such obligations, You may act only\\n//       on Your own behalf and on Your sole responsibility, not on behalf\\n//       of any other Contributor, and only if You agree to indemnify,\\n//       defend, and hold each Contributor harmless for any liability\\n//       incurred by, or claims asserted against, such Contributor by reason\\n//       of your accepting any such warranty or additional liability.\\n\\n//    END OF TERMS AND CONDITIONS\\n\\n//    Copyright (C) 2020 Cartesi Pte. Ltd.\\n\\n//    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n//    you may not use this file except in compliance with the License.\\n//    You may obtain a copy of the License at\\n\\n//        http://www.apache.org/licenses/LICENSE-2.0\\n\\n//    Unless required by applicable law or agreed to in writing, software\\n//    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n//    See the License for the specific language governing permissions and\\n//    limitations under the License.\\n\\n/// @title DescartesInterface\\n/// @author Stephen Chen\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@cartesi/util/contracts/Instantiator.sol\\\";\\n\\n\\ninterface DescartesInterface is Instantiator {\\n\\n    enum State {\\n        WaitingProviders,\\n        ProviderMissedDeadline,\\n        WaitingChallengeDrives,\\n        WaitingReveals,\\n        WaitingClaim,\\n        ClaimerMissedDeadline,\\n        WaitingConfirmationDeadline, // \\\"Voting Phase\\\"\\n        WaitingChallengeResult, // \\\"Voting Phase\\\"\\n        ChallengerWon,\\n        ClaimerWon,\\n        ConsensusResult\\n    }\\n\\n    /*\\n    There are two types of drive, one is directDrive, and the other is loggerDrive.\\n    directDrive has content inserted to the directValue field with up to 1MB;\\n    loggerDrive has content submitted to the logger contract,\\n    which can be retrieved with driveLog2Size and loggerRootHash.\\n    The needsLogger field is set to true for loggerDrive, false for directDrive.\\n\\n    The waitsProvider field is set to true meaning the drive is not ready,\\n    and needs to be filled during the WaitingProviders phase.\\n    The provider field is the user who is responsible for filling out the drive.\\n    I.e the directValue of directDrive, or the loggerRootHash of loggerDrive\\n    */\\n    struct Drive {\\n        // start position of the drive\\n        uint64 position;\\n        // log2 size of the drive in the unit of bytes\\n        uint8 driveLog2Size;\\n        // direct value inserted to the drive\\n        bytes directValue;\\n        // ipfs object path of the logger drive\\n        bytes loggerIpfsPath;\\n        // root hash of the drive submitted to the logger\\n        bytes32 loggerRootHash;\\n        // the user who's responsible for filling out the drive\\n        address provider;\\n        // indicates the drive needs to wait for the provider to provide content\\n        bool waitsProvider;\\n        // indicates the content of the drive must be retrieved from logger\\n        bool needsLogger;\\n    }\\n\\n    struct Party {\\n        bool isParty;\\n        bool hasVoted;\\n        bool hasCheated;\\n        uint64 arrayIdx;\\n    }\\n\\n    /// @notice Instantiate a Descartes SDK instance.\\n    /// @param _finalTime max cycle of the machine for that computation\\n    /// @param _templateHash hash of the machine with all drives empty\\n    /// @param _outputPosition position of the output drive\\n    /// @param _roundDuration duration of the round (security param)\\n    /// @param _inputDrives an array of drive which assemble the machine\\n    /// @return uint256, Descartes index\\n    function instantiate(\\n        uint256 _finalTime,\\n        bytes32 _templateHash,\\n        uint64 _outputPosition,\\n        uint8 _outputLog2Size,\\n        uint256 _roundDuration,\\n        address[] memory parties,\\n        Drive[] memory _inputDrives) external returns (uint256);\\n\\n    /// @notice Get result of a finished instance.\\n    /// @param _index index of Descartes instance to get result\\n    /// @return bool, indicates the result is ready\\n    /// @return bool, indicates the sdk is still running\\n    /// @return address, the user to blame for the abnormal stop of the sdk\\n    /// @return bytes32, the result of the sdk if available\\n    function getResult(uint256 _index) external view returns (\\n        bool,\\n        bool,\\n        address,\\n        bytes memory);\\n\\n    /// @notice Deactivate a Descartes SDK instance.\\n    /// @param _index index of Descartes instance to deactivate\\n    function destruct(uint256 _index) external;\\n}\\n\",\"keccak256\":\"0x9efd75dd65254d360675e5a439c8a24fd15795d05b062a68130e9ed62190e403\",\"license\":\"Apache-2.0\"},\"@cartesi/logger/contracts/Logger.sol\":{\"content\":\"// Copyright (C) 2020 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: GPL-3.0-only\\n// This program is free software: you can redistribute it and/or modify it under\\n// the terms of the GNU General Public License as published by the Free Software\\n// Foundation, either version 3 of the License, or (at your option) any later\\n// version.\\n\\n// This program is distributed in the hope that it will be useful, but WITHOUT ANY\\n// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\\n// PARTICULAR PURPOSE. See the GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n\\n// Note: This component currently has dependencies that are licensed under the GNU\\n// GPL, version 3, and so you should treat this component as a whole as being under\\n// the GPL version 3. But all Cartesi-written code in this component is licensed\\n// under the Apache License, version 2, or a compatible permissive license, and can\\n// be used independently under the Apache v2 license. After this component is\\n// rewritten, the entire component will be released under the Apache v2 license.\\n\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"@cartesi/util/contracts/Decorated.sol\\\";\\nimport \\\"@cartesi/util/contracts/Merkle.sol\\\";\\nimport \\\"./LoggerInterface.sol\\\";\\n\\n\\n/// @title Logger\\n/// @author Stephen Chen\\n/// @notice A contract that offers data availability\\n/// @dev This contract is not well-tested yet.\\ncontract Logger is Decorated, LoggerInterface {\\n  // the caller can either provide the full data to generate the Merkle tree root\\n  // or combine the existing hashes in the history to a deeper tree\\n\\n    struct DataEntry {\\n        uint64 log2Size;\\n        bytes32 root;\\n    }\\n\\n    mapping(bytes32 => bool) logSubmitted;\\n    mapping(bytes32 => uint256) logIndex;\\n    mapping(uint256 => bytes32) logRoot;\\n    DataEntry[] dataHistory;\\n\\n    uint256 public currentIndex = 0;\\n\\n    // TODO: get rid of the _data from event\\n    event MerkleRootCalculatedFromData(uint256 indexed _index, bytes8[] _data, bytes32 indexed _root, uint64 _log2Size);\\n    event MerkleRootCalculatedFromHistory(uint256 indexed _index, uint256[] _indices, bytes32 indexed _root, uint64 _log2Size);\\n\\n    /// @notice Calculate the Merkle tree and return the root hash\\n    // @param _hashes The array of words of the file\\n    function calculateMerkleRootFromData(uint64 _log2Size, bytes8[] memory _data) public override returns(bytes32) {\\n        require(_log2Size >= 3, \\\"Has to be at least one word\\\");\\n        require(_log2Size <= 64, \\\"Cannot be bigger than the machine itself\\\");\\n        require(_data.length > 0, \\\"The input array cannot be empty\\\");\\n\\n        bytes8[] memory data = _data;\\n        uint256 power2Length = uint64(2) ** (_log2Size - 3);\\n\\n        require(power2Length >= _data.length, \\\"The input array is bigger than declared log2 size\\\");\\n\\n        if (_data.length != power2Length) {\\n            // pad the list to length of power of 2\\n            bytes8[] memory paddedData = new bytes8[](power2Length);\\n\\n            for (uint256 i = 0; i < _data.length; ++i) {\\n                paddedData[i] = _data[i];\\n            }\\n            for (uint256 i = _data.length; i < paddedData.length; ++i) {\\n                paddedData[i] = 0;\\n            }\\n            data = paddedData;\\n        }\\n\\n        bytes32[] memory hashes = new bytes32[](data.length);\\n\\n        for (uint256 i = 0; i<data.length; ++i) {\\n            hashes[i] = keccak256(abi.encodePacked(data[i]));\\n        }\\n\\n        bytes32 root = Merkle.calculateRootFromPowerOfTwo(hashes);\\n        dataHistory.push(DataEntry(_log2Size, root));\\n        emit MerkleRootCalculatedFromData(\\n            currentIndex,\\n            _data,\\n            root,\\n            _log2Size);\\n        logSubmitted[root] = true;\\n        logIndex[root] = currentIndex;\\n        logRoot[currentIndex] = root;\\n        ++currentIndex;\\n        return root;\\n    }\\n\\n    /// @notice Calculate the Merkle tree and return the root hash\\n    // @param _indices The array of indices of the history\\n    function calculateMerkleRootFromHistory(uint64 _log2Size, uint256[] memory _indices) public returns(bytes32) {\\n        require(Merkle.isPowerOf2(_indices.length), \\\"The input array must contain power of 2 elements\\\");\\n\\n        // check indices exist and the value of log2Size matches\\n        for (uint256 i = 0; i<_indices.length; ++i) {\\n            require(currentIndex > _indices[i], \\\"The index of history doesn't exist yet\\\");\\n            require(_log2Size == dataHistory[_indices[i]].log2Size, \\\"The value of log2Size doesn't match in history\\\");\\n        }\\n\\n        bytes32[] memory hashes = new bytes32[](_indices.length);\\n        for (uint256 i = 0; i<_indices.length; ++i) {\\n            hashes[i] = dataHistory[_indices[i]].root;\\n        }\\n\\n        bytes32 root = Merkle.calculateRootFromPowerOfTwo(hashes);\\n\\n        uint64 log2Size = Merkle.getLog2Floor(_indices.length);\\n        dataHistory.push(DataEntry(log2Size + _log2Size, root));\\n        emit MerkleRootCalculatedFromHistory(\\n            currentIndex,\\n            _indices,\\n            root,\\n            log2Size + _log2Size);\\n        logSubmitted[root] = true;\\n        logIndex[root] = currentIndex;\\n        logRoot[currentIndex] = root;\\n        ++currentIndex;\\n        return root;\\n    }\\n\\n    /// @notice Getter function to check if log has been submitted for the given hash\\n    // @param _root The hash value to check in the logger history\\n    function isLogAvailable(bytes32 _root, uint64 _log2Size) public override view returns(bool) {\\n        if (logSubmitted[_root]) {\\n            return ((dataHistory[logIndex[_root]].log2Size) == _log2Size);\\n        }\\n        return false;\\n    }\\n\\n    /// @notice Getter function to get the index in the history for the given hash\\n    // @param _root The hash value to check in the logger history\\n    function getLogIndex(bytes32 _root) public view returns(uint256) {\\n        return logIndex[_root];\\n    }\\n\\n    /// @notice Getter function to get the root in the history for the given index\\n    // @param _index The index value to check in the logger history\\n    function getLogRoot(uint256 _index) public view returns(bytes32) {\\n        require(_index < currentIndex, \\\"The index doesn't exist in the history\\\");\\n        return logRoot[_index];\\n    }\\n}\\n\",\"keccak256\":\"0x05f4bdd4ae68df1272b4abcf459f6935fe61ae439813d231ecd7c5622cc7d652\",\"license\":\"GPL-3.0-only\"},\"@cartesi/logger/contracts/LoggerInterface.sol\":{\"content\":\"// Copyright (C) 2020 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: GPL-3.0-only\\n// This program is free software: you can redistribute it and/or modify it under\\n// the terms of the GNU General Public License as published by the Free Software\\n// Foundation, either version 3 of the License, or (at your option) any later\\n// version.\\n\\n// This program is distributed in the hope that it will be useful, but WITHOUT ANY\\n// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\\n// PARTICULAR PURPOSE. See the GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n\\n// Note: This component currently has dependencies that are licensed under the GNU\\n// GPL, version 3, and so you should treat this component as a whole as being under\\n// the GPL version 3. But all Cartesi-written code in this component is licensed\\n// under the Apache License, version 2, or a compatible permissive license, and can\\n// be used independently under the Apache v2 license. After this component is\\n// rewritten, the entire component will be released under the Apache v2 license.\\n\\n\\n/// @title Interface for logger test instantiator\\npragma solidity ^0.7.0;\\n\\n\\ninterface LoggerInterface {\\n    function isLogAvailable(bytes32 _root, uint64 _log2Size) external view returns(bool);\\n\\n    function calculateMerkleRootFromData(uint64 _log2Size, bytes8[] memory _data) external returns(bytes32);\\n}\\n\",\"keccak256\":\"0x529cc083d7bf62b13d083f10baf2b3d2b33b15612ea605fb84ec2da0c3b0e7a5\",\"license\":\"GPL-3.0-only\"},\"@cartesi/util/contracts/Decorated.sol\":{\"content\":\"// Copyright 2020 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\npragma solidity ^0.7.0;\\n\\n\\ncontract Decorated {\\n    // This contract defines several modifiers but does not use\\n    // them - they will be used in derived contracts.\\n    modifier onlyBy(address user) {\\n        require(msg.sender == user, \\\"Cannot be called by user\\\");\\n        _;\\n    }\\n\\n    modifier onlyAfter(uint256 time) {\\n        require(block.timestamp > time, \\\"Cannot be called now\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xdbba019b8f7f93b212a5bbae402ee988321c4fa82ed2b4c9e55b4d7ddf35dcc3\",\"license\":\"Apache-2.0\"},\"@cartesi/util/contracts/Instantiator.sol\":{\"content\":\"// Copyright 2020 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n\\npragma solidity ^0.7.0;\\n\\n\\ninterface Instantiator {\\n\\n    modifier onlyInstantiated(uint256 _index) virtual;\\n\\n    modifier onlyActive(uint256 _index) virtual;\\n\\n    modifier increasesNonce(uint256 _index) virtual;\\n\\n    function isActive(uint256 _index) external view returns (bool);\\n\\n    function getNonce(uint256 _index) external view returns (uint256);\\n\\n    function isConcerned(uint256 _index, address _user) external view returns (bool);\\n\\n    function getSubInstances(uint256 _index, address) external view returns (address[] memory _addresses, uint256[] memory _indices);\\n}\\n\",\"keccak256\":\"0x416e612dc09b10765de32ec06cf0a7ee4e050e16db8bf3b8ad832a6082b7dfd6\",\"license\":\"Apache-2.0\"},\"@cartesi/util/contracts/InstantiatorImpl.sol\":{\"content\":\"// Copyright 2020 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"./Instantiator.sol\\\";\\n\\nabstract contract InstantiatorImpl is Instantiator {\\n    uint256 public currentIndex = 0;\\n\\n    mapping(uint256 => bool) internal active;\\n    mapping(uint256 => uint256) internal nonce;\\n\\n    modifier onlyInstantiated(uint256 _index) override {\\n        require(currentIndex > _index, \\\"Index not instantiated\\\");\\n        _;\\n    }\\n\\n    modifier onlyActive(uint256 _index) override {\\n        require(currentIndex > _index, \\\"Index not instantiated\\\");\\n        require(isActive(_index), \\\"Index inactive\\\");\\n        _;\\n    }\\n\\n    modifier increasesNonce(uint256 _index) override {\\n        nonce[_index]++;\\n        _;\\n    }\\n\\n    function isActive(uint256 _index) public override view returns (bool) {\\n        return (active[_index]);\\n    }\\n\\n    function getNonce(uint256 _index)\\n        public\\n        override\\n        view\\n        onlyActive(_index)\\n        returns (uint256 currentNonce)\\n    {\\n        return nonce[_index];\\n    }\\n\\n    function deactivate(uint256 _index) internal {\\n        active[_index] = false;\\n        nonce[_index] = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x8f8e29b807e5c55198206a370b4d8751cbd98a663e3f89faff274e2f9d7cae75\",\"license\":\"Apache-2.0\"},\"@cartesi/util/contracts/Merkle.sol\":{\"content\":\"// Copyright 2020 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n\\n/// @title Library for Merkle proofs\\npragma solidity ^0.7.0;\\n\\n\\nlibrary Merkle {\\n    function getPristineHash(uint8 _log2Size) public pure returns (bytes32) {\\n        require(_log2Size >= 3, \\\"Has to be at least one word\\\");\\n        require(_log2Size <= 64, \\\"Cannot be bigger than the machine itself\\\");\\n\\n        bytes8 value = 0;\\n        bytes32 runningHash = keccak256(abi.encodePacked(value));\\n\\n        for (uint256 i = 3; i < _log2Size; i++) {\\n            runningHash = keccak256(abi.encodePacked(runningHash, runningHash));\\n        }\\n\\n        return runningHash;\\n    }\\n\\n    function getRoot(uint64 _position, bytes8 _value, bytes32[] memory proof) public pure returns (bytes32) {\\n        bytes32 runningHash = keccak256(abi.encodePacked(_value));\\n\\n        return getRootWithDrive(\\n            _position,\\n            3,\\n            runningHash,\\n            proof\\n        );\\n    }\\n\\n    function getRootWithDrive(\\n        uint64 _position,\\n        uint8 _logOfSize,\\n        bytes32 _drive,\\n        bytes32[] memory siblings\\n    ) public pure returns (bytes32)\\n    {\\n        require(_logOfSize >= 3, \\\"Must be at least a word\\\");\\n        require(_logOfSize <= 64, \\\"Cannot be bigger than the machine itself\\\");\\n\\n        uint64 size = uint64(2) ** _logOfSize;\\n\\n        require(((size - 1) & _position) == 0, \\\"Position is not aligned\\\");\\n        require(siblings.length == 64 - _logOfSize, \\\"Proof length does not match\\\");\\n\\n        bytes32 drive = _drive;\\n\\n        for (uint64 i = 0; i < siblings.length; i++) {\\n            if ((_position & (size << i)) == 0) {\\n                drive = keccak256(abi.encodePacked(drive, siblings[i]));\\n            } else {\\n                drive = keccak256(abi.encodePacked(siblings[i], drive));\\n            }\\n        }\\n\\n        return drive;\\n    }\\n\\n    function getLog2Floor(uint256 number) public pure returns (uint8) {\\n\\n        uint8 result = 0;\\n\\n        uint256 checkNumber = number;\\n        checkNumber = checkNumber >> 1;\\n        while (checkNumber > 0) {\\n            ++result;\\n            checkNumber = checkNumber >> 1;\\n        }\\n\\n        return result;\\n    }\\n\\n    function isPowerOf2(uint256 number) public pure returns (bool) {\\n\\n        uint256 checkNumber = number;\\n        if (checkNumber == 0) {\\n            return false;\\n        }\\n\\n        while ((checkNumber & 1) == 0) {\\n            checkNumber = checkNumber >> 1;\\n        }\\n\\n        checkNumber = checkNumber >> 1;\\n\\n        if (checkNumber == 0) {\\n            return true;\\n        }\\n\\n        return false;\\n    }\\n\\n    /// @notice Calculate the root of Merkle tree from an array of power of 2 elements\\n    /// @param hashes The array containing power of 2 elements\\n    /// @return byte32 the root hash being calculated\\n    function calculateRootFromPowerOfTwo(bytes32[] memory hashes) public pure returns (bytes32) {\\n        // revert when the input is not of power of 2\\n        require(isPowerOf2(hashes.length), \\\"The input array must contain power of 2 elements\\\");\\n\\n        if (hashes.length == 1) {\\n            return hashes[0];\\n        }else {\\n            bytes32[] memory newHashes = new bytes32[](hashes.length >> 1);\\n\\n            for (uint256 i = 0; i < hashes.length; i += 2) {\\n                newHashes[i >> 1] = keccak256(abi.encodePacked(hashes[i], hashes[i + 1]));\\n            }\\n\\n            return calculateRootFromPowerOfTwo(newHashes);\\n        }\\n    }\\n\\n}\\n\",\"keccak256\":\"0xfab427885024176038f230531f5fbc87e80c38b22d7b5307a57a7a0b7cdfc6fe\",\"license\":\"Apache-2.0\"},\"contracts/TurnBasedGameContext.sol\":{\"content\":\"// Copyright 2021 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n/// @title TurnBasedGame\\n/// @author Milton Jonathan\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@cartesi/descartes-sdk/contracts/DescartesInterface.sol\\\";\\nimport \\\"./TurnBasedGameUtil.sol\\\";\\n\\n\\n// records a player's turn\\nstruct Turn {\\n    // player that submitted the turn\\n    address player;\\n    // timestamp when turn was submitted\\n    uint256 timestamp;\\n    // indices that identify the turn's data stored in the Logger\\n    uint256[] dataLogIndices;\\n}\\n\\n\\n// records information for an instantiated game\\nstruct GameContext {\\n    // template hash for the Cartesi Machine computation that verifies the game (identifies the game computation/logic)\\n    bytes32 gameTemplateHash;\\n    // game-specific initial metadata/parameters\\n    bytes gameMetadata;\\n    // validator nodes to be used for descartes computations\\n    address[] validators;\\n    // players involved\\n    address[] players;\\n    // player funds locked for the game\\n    uint[] playerFunds;\\n    // game-specific information per player\\n    bytes[] playerInfos;\\n    // game-specific turns submitted by each user (including initial state)\\n    Turn[] turns;\\n    // indicates whether a descartes computation has been instantiated\\n    bool isDescartesInstantiated;\\n    // associated descartes computation index\\n    uint256 descartesIndex;\\n    // claim data: player who placed claim\\n    address claimer;\\n    // claim data: claimed result represented by a distribution of player funds\\n    uint[] claimedFundsShare;\\n    // FIXME: either enforce max of 255 players or use a variable-sized Bitmask\\n    // claim data: mask indicating players that agree with the claim\\n    uint256 claimAgreementMask;\\n}\\n\\n\\n// models a turned-based game instance\\nlibrary TurnBasedGameContext {\\n\\n    // events emitted    \\n    event GameReady(uint256 indexed _index, GameContext _context);\\n    event TurnOver(uint256 indexed _index, uint256 indexed _turnIndex, Turn _turn);\\n    event GameResultClaimed(uint256 indexed _index, uint[] _fundsShare, address indexed _author);\\n    event GameChallenged(uint256 indexed _index, uint256 indexed _descartesIndex, address indexed _author);\\n    event GameOver(uint256 indexed _index, uint[] _fundsShare);\\n\\n\\n    /// @notice Submits a new turn for a given game\\n    /// @param _context game context\\n    /// @param _index index identifying the game\\n    /// @param _turnIndex a sequential number for the turn, which must be equal to the last submitted turn's index + 1\\n    /// @param _data game-specific turn data (array of 64-bit words)\\n    /// @param _logger Logger instance used for storing data in the event history\\n    /// @param _turnChunkLog2Size turn data log2size considering 64-bit words (i.e., how many 64-bit words are there in a chunk of turn data)\\n    function submitTurn(GameContext storage _context, uint256 _index, uint256 _turnIndex, bytes calldata _data, Logger _logger, uint8 _turnChunkLog2Size) public\\n        onlyByPlayer(_context)\\n    {\\n        // ensures game is still ongoing\\n        // - result has not been claimed yet\\n        require(_context.claimer == address(0), \\\"Game end has been claimed\\\");\\n        // - game has not been challenged\\n        require(!_context.isDescartesInstantiated, \\\"Game verification in progress\\\");\\n\\n        // ensures tuen submission sequence is correct\\n        require(_turnIndex == _context.turns.length, \\\"Invalid turn submission sequence\\\");\\n\\n        // defines number of required chunks\\n        uint chunkSize = 2 ** _turnChunkLog2Size;\\n        uint nChunks = ((_data.length-1) / chunkSize) + 1;\\n\\n        uint256[] memory logIndices = new uint256[](nChunks);\\n        if (nChunks > 1) {\\n            // build full chunks (all but the last one)\\n            // - these can make use of a single chunkData buffer, because they will be completely overwritten for each chunk\\n            bytes8[] memory chunkData = new bytes8[](chunkSize/8);\\n            uint start = 0;\\n            uint end = 0;\\n            for (uint i = 0; i < nChunks - 1; i++) {\\n                start = end;\\n                end = start + chunkSize;\\n                TurnBasedGameUtil.bytes2bytes8(_data, start, end, chunkData);\\n                bytes32 logHash = _logger.calculateMerkleRootFromData(_turnChunkLog2Size, chunkData);\\n                logIndices[i] = _logger.getLogIndex(logHash);\\n            }\\n        }\\n        {\\n            // last chunk (probably not full)\\n            uint start = (nChunks - 1) * chunkSize;\\n            uint end = _data.length;\\n            uint lastChunkSize = (end - start - 1)/8 + 1;\\n            bytes8[] memory chunkData = new bytes8[](lastChunkSize);\\n            TurnBasedGameUtil.bytes2bytes8(_data, start, end, chunkData);\\n            bytes32 logHash = _logger.calculateMerkleRootFromData(_turnChunkLog2Size, chunkData);\\n            logIndices[nChunks-1] = _logger.getLogIndex(logHash);\\n        }\\n\\n        // instantiates new turn\\n        Turn memory turn = Turn({\\n            player: msg.sender,\\n            timestamp: block.timestamp,\\n            dataLogIndices: logIndices\\n        });\\n\\n        // records new turn in the game context\\n        _context.turns.push(turn);\\n        \\n        // emits event for new turn\\n        emit TurnOver(_index, _turnIndex, turn);\\n    }\\n\\n\\n    /// @notice Challenges game state, triggering a verification by a Descartes computation\\n    /// @param _context game context\\n    /// @param _index index identifying the game\\n    /// @param _descartes Descartes instance used for triggering verified computations\\n    /// @param _logger Logger instance used for storing data in the event history\\n    /// @param _turnChunkLog2Size turn data log2size considering 64-bit words (i.e., how many 64-bit words are there in a chunk of turn data)\\n    /// @return index of the Descartes computation\\n    function challengeGame(GameContext storage _context, uint256 _index, DescartesInterface _descartes, Logger _logger, uint8 _turnChunkLog2Size, uint256 _emptyDataLogIndex) public\\n        onlyByPlayer(_context)\\n        returns (uint256)\\n    {\\n        // ensures Descartes verification is not in progress or has not already been performed\\n        // - a new challenge is allowed if the Descartes computation is inactive or has failed\\n        if (_context.isDescartesInstantiated) {\\n            (bool isResultReady, bool isRunning, ,) = _descartes.getResult(_context.descartesIndex);\\n            if (isRunning == true) {\\n                revert(\\\"Game verification already in progress\\\");\\n            } else if (isResultReady == true) {\\n                revert(\\\"Game verification has already been performed\\\");\\n            } else {\\n                // the Descartes computation has failed: it is not running and there are no results available\\n                // - let's destruct it before allowing a new computation to take place\\n                _descartes.destruct(_context.descartesIndex);\\n            }\\n        }\\n\\n        // builds input drives for the descartes computation\\n        DescartesInterface.Drive[] memory drives = buildInputDrives(_context, _logger, _turnChunkLog2Size, _emptyDataLogIndex);\\n\\n        // instantiates the computation\\n        _context.descartesIndex = _descartes.instantiate(\\n            // FIXME: using lower max cycles unti Descartes 1.2.0 is released (includes confirm tx to speed things up)\\n            5e11,                  // max cycles allowed\\n            // 1e13,                  // max cycles allowed\\n            _context.gameTemplateHash,  // hash identifying the computation template\\n            0xf000000000000000,    // output drive position: 8th drive position after the rootfs, dapp data, and 5 input drives\\n            // FIXME: either enforce max of 4 players or make this variable\\n            10,                    // output drive size: 1K (should hold awarded amounts for up to 4 players)\\n            51,                    // round duration\\n            _context.validators,   // parties involved in the computation (validator nodes)\\n            drives\\n        );\\n\\n        _context.isDescartesInstantiated = true;\\n\\n        // emits event announcing game end has been claimed and that Descartes verification is underway\\n        emit GameChallenged(_index, _context.descartesIndex, msg.sender);\\n\\n        return _context.descartesIndex;\\n    }\\n\\n\\n    /// @notice Claims game has ended with the provided result (share of locked funds)\\n    /// @param _context game context\\n    /// @param _index index identifying the game\\n    /// @param _fundsShare result of the game given as a distribution of the funds previously locked\\n    function claimResult(GameContext storage _context, uint256 _index, uint[] memory _fundsShare) public\\n        onlyByPlayer(_context)\\n    {\\n        // reverts if result has already been claimed\\n        require(_context.claimer == address(0), \\\"Result has already been claimed for this game: it must now be either confirmed or challenged\\\");\\n        // reverts if game verification has been triggered\\n        require(!_context.isDescartesInstantiated, \\\"Game has been challenged and a verification has been requested\\\");\\n\\n        // ensures claimed result is valid\\n        TurnBasedGameUtil.checkResult(_context.playerFunds, _fundsShare);\\n\\n        // stores claimer and claimed result in game context\\n        _context.claimer = msg.sender;\\n        _context.claimedFundsShare = _fundsShare;\\n\\n        // adds claimer to mask indicating players that agree with the claim\\n        _context.claimAgreementMask = TurnBasedGameUtil.updateClaimAgreementMask(_context.claimAgreementMask, _context.players, msg.sender);\\n\\n        emit GameResultClaimed(_index, _fundsShare, msg.sender);\\n    }\\n\\n\\n    /// @notice Confirms game results previously claimed\\n    /// @param _context game context\\n    /// @return _isConsensus boolean indicating whether all players have agreed with the claim\\n    function confirmResult(GameContext storage _context) public\\n        onlyByPlayer(_context)\\n        returns (bool _isConsensus)\\n    {\\n        // reverts if result has not been claimed yet\\n        require(_context.claimer != address(0), \\\"Result has not been claimed for this game yet\\\");\\n        // reverts if game verification has been triggered\\n        require(!_context.isDescartesInstantiated, \\\"Game has been challenged and a verification has been requested\\\");\\n\\n        // adds confirming player to mask indicating players that agree with the claim\\n        _context.claimAgreementMask = TurnBasedGameUtil.updateClaimAgreementMask(_context.claimAgreementMask, _context.players, msg.sender);\\n\\n        // checks if all players have agreed with the claim\\n        uint256 consensusMask = (uint256(1) << _context.players.length) - uint256(1);\\n        if (_context.claimAgreementMask == consensusMask) {\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n    \\n\\n    /// @notice Applies the result of a game verified by Descartes, transferring funds according to the Descartes computation output\\n    /// @param _context game context\\n    /// @param _index index identifying the game\\n    /// @param _descartes Descartes instance used for triggering verified computations\\n    function applyVerificationResult(GameContext storage _context, uint256 _index, DescartesInterface _descartes) public\\n    {\\n        // ensures Descartes computation has been instantiated\\n        require(_context.isDescartesInstantiated, \\\"Game verification has not been requested\\\");\\n\\n        // queries Descartes result\\n        (bool isResultReady, bool isRunning, , bytes memory result) = _descartes.getResult(_context.descartesIndex);\\n\\n        // ensures Descartes computation result is ready\\n        require(!isRunning, \\\"Game verification result has not been computed yet\\\");\\n        require(isResultReady, \\\"Game verification result not available\\\");\\n\\n        // ensures result is valid: needs to have a uint256 value (32 bytes) for each player\\n        require(result.length >= 32*_context.players.length, \\\"Game verification result is invalid: should have one uint256 value for each player\\\");\\n\\n        // decodes result bytes as an uint[] representing amount from the locked funds to be transferred to each player\\n        uint[] memory fundsShare = new uint[](_context.players.length);\\n        for (uint i = 0; i < _context.players.length; i++) {\\n            uint256 fundValue;\\n            assembly {\\n                result := add(result, 0x20)\\n                fundValue := mload(result)\\n            }\\n            fundsShare[i] = fundValue;\\n        }\\n\\n        // applies result and ends game\\n        applyResult(_context, _index, fundsShare);\\n\\n        // descartes computation is over: we can destruct it\\n        _descartes.destruct(_context.descartesIndex);\\n    }\\n\\n\\n    /// @notice Indicates whether a given player is concerned about a game\\n    /// @param _context game context\\n    /// @param _player a player's address\\n    /// @return true if the player is concerned about the game, false otherwise\\n    function isConcerned(GameContext storage _context, address _player) internal view\\n        returns (bool)\\n    {\\n        // checks if given address belongs to one of the game players\\n        for (uint i = 0; i < _context.players.length; i++) {\\n            if (_player == _context.players[i]) {\\n                return true;\\n            }\\n        }\\n\\n        // given address is not involved in the game\\n        return false;\\n    }\\n\\n\\n    /// @notice Applies the results of a game, transferring locked funds according to the provided distribution\\n    /// @param _context game context\\n    /// @param _index index identifying the game\\n    /// @param _fundsShare result of the game given as a distribution of the funds previously locked\\n    function applyResult(GameContext storage _context, uint256 _index, uint[] memory _fundsShare) public {\\n\\n        // ensures provided result is valid\\n        uint fundsToBurn = TurnBasedGameUtil.checkResult(_context.playerFunds, _fundsShare);\\n\\n        // FIXME: transfer funds according to result, and burn remaining funds\\n        // ...\\n\\n        // deactivates game to prevent further interaction with it\\n        delete _context.players;\\n        delete _context.playerFunds;\\n        delete _context.turns;\\n\\n        // emit event for end of game\\n        emit GameOver(_index, _fundsShare);\\n    }    \\n\\n\\n    function buildInputDrives(GameContext storage _context, Logger _logger, uint8 _turnChunkLog2Size, uint256 _emptyDataLogIndex) internal\\n        returns (DescartesInterface.Drive[] memory)\\n    {\\n        // builds input drives for the descartes computation\\n        DescartesInterface.Drive[] memory drives = new DescartesInterface.Drive[](5);\\n\\n        // 1st input drive: game metadata (3rd drive position after rootfs and dapp data)\\n        drives[0] = buildDirectDrive(_context.gameMetadata, 0xa000000000000000);\\n\\n        // 2nd input drive: players data\\n        bytes memory players = abi.encodePacked(uint32(_context.players.length), _context.players, _context.playerFunds);\\n        drives[1] = buildDirectDrive(players, 0xb000000000000000);\\n\\n        // 3rd input drive: turns metadata\\n        drives[2] = buildTurnsMetadataDrive(_context, _turnChunkLog2Size, 0xc000000000000000);\\n\\n        // 4th input drive: turns data stored in the Logger\\n        drives[3] = buildTurnsDataDrive(_context, _logger, _turnChunkLog2Size, _emptyDataLogIndex, 0xd000000000000000);\\n\\n        // 5th input drive: verification info, specifying the challenger player and, if present, the claimer along with the claimed result\\n        // - this is important so that the Descartes computation can punish a false claimer or challenger accordingly in the resulting funds distribution\\n        bytes memory verificationInfo = abi.encodePacked(msg.sender, _context.claimer, _context.claimedFundsShare);\\n        drives[4] = buildDirectDrive(verificationInfo, 0xe000000000000000);\\n\\n        return drives;\\n    }\\n\\n\\n    /// @notice Builds a Descartes Drive using directly provided data\\n    /// @param _data drive data\\n    /// @param _drivePosition drive position in a 64-bit address space\\n    /// @return _drive the Descartes drive\\n    function buildDirectDrive(bytes memory _data, uint64 _drivePosition) internal pure\\n        returns (DescartesInterface.Drive memory _drive)\\n    {\\n        // minimum drive log2size is 5 (one 32-byte word)\\n        uint8 driveLog2Size = 5;\\n        if (_data.length > 32) {\\n            driveLog2Size = TurnBasedGameUtil.getLog2Ceil(_data.length);\\n        }\\n        return DescartesInterface.Drive(\\n            _drivePosition,        // drive position\\n            driveLog2Size,         // driveLog2Size\\n            _data,                 // directValue\\n            \\\"\\\",                    // loggerIpfsPath (empty)\\n            0x00,                  // loggerRootHash\\n            address(0),            // provider\\n            false,                 // waitsProvider\\n            false                  // needsLogger\\n        );\\n    }\\n\\n    /// @notice Builds a Descartes input drive with the metadata from the turns of a given game\\n    /// @param _context game context\\n    /// @param _drivePosition drive position in a 64-bit address space\\n    /// @return _drive the Descartes drive\\n    function buildTurnsMetadataDrive(GameContext storage _context, uint8 _turnChunkLog2Size, uint64 _drivePosition) internal view\\n        returns (DescartesInterface.Drive memory _drive)\\n    {\\n        address[] memory players = new address[](_context.turns.length);\\n        uint256[] memory timestamps = new uint256[](_context.turns.length);\\n        uint256[] memory sizes = new uint256[](_context.turns.length);\\n        for (uint i = 0; i < _context.turns.length; i++) {\\n            players[i] = _context.turns[i].player;\\n            timestamps[i] = _context.turns[i].timestamp;\\n            sizes[i] = _context.turns[i].dataLogIndices.length * (2 ** _turnChunkLog2Size);\\n        }\\n        bytes memory turnsMetadata = abi.encodePacked(uint32(_context.turns.length), players, timestamps, sizes);\\n        return buildDirectDrive(turnsMetadata, _drivePosition);\\n    }\\n\\n\\n    /// @notice Builds a Descartes input drive with the data from the turns of a given game\\n    /// @param _context game context\\n    /// @param _drivePosition drive position in a 64-bit address space\\n    /// @return _drive the Descartes drive\\n    function buildTurnsDataDrive(GameContext storage _context, Logger _logger, uint8 _turnChunkLog2Size, uint256 _emptyDataLogIndex, uint64 _drivePosition) internal\\n        returns (DescartesInterface.Drive memory _drive)\\n    {\\n        // computes total number of turn chunk entries\\n        uint nTotalChunks = 0;\\n        for (uint iTurn = 0; iTurn < _context.turns.length; iTurn++) {\\n            nTotalChunks += _context.turns[iTurn].dataLogIndices.length;\\n        }\\n\\n        // builds \\\"logRoot\\\" logger entry to be used as an input drive with turn data\\n        // - number of composing entries must be a power of 2\\n        // - each entry will correspond to one turn's chunk of data\\n        // - padding is done by adding \\\"empty\\\" entries (repeats log index pointing to empty data)\\n        uint8 logIndicesLengthLog2 = TurnBasedGameUtil.getLog2Ceil(nTotalChunks);\\n        uint64 logIndicesLength = uint64(1) << logIndicesLengthLog2;\\n        uint256[] memory logIndices = new uint256[](logIndicesLength);\\n        uint i = 0;\\n        for (uint iTurn = 0; iTurn < _context.turns.length; iTurn++) {\\n            uint256[] memory logIndicesTurn = _context.turns[iTurn].dataLogIndices;\\n            for (uint iChunk = 0; iChunk < logIndicesTurn.length; iChunk++) {\\n                logIndices[i++] = logIndicesTurn[iChunk];\\n            }\\n        }\\n        while (i < logIndicesLength) {\\n            logIndices[i++] = _emptyDataLogIndex;\\n        }\\n        bytes32 logRoot = _logger.calculateMerkleRootFromHistory(_turnChunkLog2Size, logIndices);\\n\\n        // total log2 size of the data under logRoot, expressed in bytes, is given by:\\n        // - size of each data chunk/entry: turnChunkLog2Size\\n        // - number of chunks/entries: logIndicesLengthLog2\\n        uint8 rootLog2Size =  _turnChunkLog2Size + logIndicesLengthLog2;\\n\\n        return DescartesInterface.Drive(\\n            _drivePosition,        // drive position\\n            rootLog2Size,          // driveLog2Size\\n            \\\"\\\",                    // directValue (empty)\\n            \\\"\\\",                    // loggerIpfsPath (empty)\\n            logRoot,               // loggerRootHash\\n            address(0),            // provider\\n            false,                 // waitsProvider\\n            true                   // needsLogger\\n        );\\n    }\\n\\n    /// @notice Allows calls only from participating players\\n    /// @param _context game context\\n    modifier onlyByPlayer(GameContext storage _context) {\\n        require(isConcerned(_context, msg.sender), \\\"Player is not participating in the game\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x229f160a67e91b4d3bdb1ef61a93ee7fc827916450841ecf817cace69da3a26c\",\"license\":\"Apache-2.0\"},\"contracts/TurnBasedGameUtil.sol\":{\"content\":\"// Copyright 2021 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n/// @title TurnBasedGameUtil\\n/// @author Milton Jonathan\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@cartesi/descartes-sdk/contracts/DescartesInterface.sol\\\";\\nimport \\\"@cartesi/logger/contracts/Logger.sol\\\";\\nimport \\\"@cartesi/util/contracts/InstantiatorImpl.sol\\\";\\n\\n/// @title TurnBasedGameUtil\\n/// @notice Library with utility methods used by the TurnBasedGame contract\\nlibrary TurnBasedGameUtil {\\n\\n    /// @notice Calculates the ceiling of the log2 of the provided number\\n    /// @param _number input number to use for the calculation\\n    /// @return the log2 ceiling result, where getLog2Ceil(0) = 0, getLog2Ceil(1) = 1, getLog2Ceil(2) = 1, etc.\\n    function getLog2Ceil(uint256 _number) internal pure\\n        returns (uint8)\\n    {\\n        uint8 result = 0;\\n        \\n        uint256 checkNumber = _number;\\n        bool notPowerOf2 = ((checkNumber & 1) == 1);\\n\\n        checkNumber = checkNumber >> 1;\\n        while (checkNumber > 0) {\\n            ++result;\\n            if (checkNumber != 1 && (checkNumber & 1) == 1) {\\n                notPowerOf2 = true;\\n            }\\n            checkNumber = checkNumber >> 1;\\n        }\\n\\n        if (notPowerOf2) {\\n            ++result;\\n        }\\n        return result;\\n    }\\n\\n\\n    /// @notice Converts a given bytes data array into an array of bytes8 entries\\n    /// @param _data bytes data array to be converted\\n    /// @param _start start index of the portion of the data array to be converted\\n    /// @param _end end index of the portion of the data array to be converted\\n    /// @param _output output bytes8 array previously allocated for storing the result\\n    function bytes2bytes8(bytes calldata _data, uint _start, uint _end, bytes8[] memory _output) internal pure {\\n        require(_end > _start, \\\"end index should be larger than start\\\");\\n        require(_start >= 0 && _start < _data.length, \\\"start index out of bounds\\\");\\n        require(_end > 0 && _end <= _data.length, \\\"end index out of bounds\\\");\\n\\n        uint length = _end - _start;\\n        uint nBytes8 = (length - 1)/8 + 1;\\n        uint nBytes32 = (length - 1)/32 + 1;\\n        uint paddingBits = (nBytes8*8 - length)*8;\\n\\n        require(_output.length >= nBytes8, \\\"output buffer is not large enough to hold result\\\");\\n\\n        bytes memory ptr = _data;\\n        assembly {\\n            ptr := add(ptr, _start)\\n        }        \\n        for (uint i = 0; i < nBytes32-1; i++) {\\n            // full word entries\\n            bytes32 value;\\n            assembly {\\n              ptr := add(ptr, 0x20)\\n              value := mload(ptr)\\n            }        \\n            _output[i*4 + 0] = bytes8(value);\\n            _output[i*4 + 1] = bytes8(value << 64);\\n            _output[i*4 + 2] = bytes8(value << 128);\\n            _output[i*4 + 3] = bytes8(value << 192);\\n        }\\n        {\\n            // last word (may be partially used)\\n            bytes32 value;\\n            assembly {\\n              ptr := add(ptr, 0x20)\\n              value := mload(ptr)\\n            }\\n            // full 8-byte entries of last word\\n            for (uint i = (nBytes32-1)*4; i < nBytes8 - 1; i++) {\\n                _output[i] = bytes8(value);\\n                value = value << 64;\\n            }\\n            // last 8-byte entry (may be partial)\\n            // - pads last value to chop out unrequested bytes\\n            bytes8 valueBytes8 = (bytes8(value) >> paddingBits) << paddingBits;\\n            _output[nBytes8-1] = valueBytes8;\\n        }\\n    }    \\n\\n\\n    /// @notice Ensures a given result is acceptable considering the player funds locked for the game\\n    /// @param _playerFunds funds originally submitted by the players\\n    /// @param _fundsShare result of the game given as a distribution of the funds previously locked\\n    /// @return _fundsToBurn the amount of funds to burn as a result of some of the locked funds not being distributed to any player\\n    function checkResult(uint[] memory _playerFunds, uint[] memory _fundsShare) internal pure\\n        returns (uint _fundsToBurn)\\n    {\\n        require(_playerFunds.length == _fundsShare.length, \\\"Resulting funds distribution does not match number of players in the game\\\");\\n\\n        // computes total funds submitted by the players and total funds distributed\\n        uint totalPlayerFunds = 0;\\n        uint totalFundsShare = 0;\\n        for (uint i = 0; i < _playerFunds.length; i++) {\\n            totalPlayerFunds += _playerFunds[i];\\n            totalFundsShare += _fundsShare[i];\\n        }\\n        require(totalPlayerFunds >= totalFundsShare, \\\"Resulting funds distribution exceeds amount locked by the players for the game\\\");\\n\\n        // amount to burn corresponds to the difference between total original player funds and resulting distribution\\n        return totalPlayerFunds - totalFundsShare;\\n    }\\n\\n    /// @notice Updates mask indicating players that agree with the claim\\n    /// @param _claimAgreementMask current agreement mask, where the i-th bit indicates if player i has agreed\\n    /// @param _players array with addresses of involved parties\\n    /// @param _agreeingPlayer address of the party that has now indicated agreement\\n    /// @return updated claim agreement mask\\n    function updateClaimAgreementMask(uint256 _claimAgreementMask, address[] memory _players, address _agreeingPlayer) internal pure\\n        returns (uint256)\\n    {\\n        for (uint i = 0; i < _players.length; i++) {\\n            if (_agreeingPlayer == _players[i]) {\\n                _claimAgreementMask = (_claimAgreementMask | (uint256(1) << i));\\n                break;\\n            }\\n        }\\n        return _claimAgreementMask;\\n    }\\n\\n}\\n\",\"keccak256\":\"0x11130a5ea26db192b1c9c05feab5cdbceb47cd55f976c254134748cdd8cd456c\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x730000000000000000000000000000000000000000301460806040526004361061006c5760003560e01c80630cdd31bc1461007157806315093ea21461009a578063906cc66c146100d757806396483c2c14610114578063aba444231461013d578063b5701feb14610166575b600080fd5b81801561007d57600080fd5b50610098600480360381019061009391906127b6565b61018f565b005b8180156100a657600080fd5b506100c160048036038101906100bc919061286c565b61046b565b6040516100ce9190613bd1565b60405180910390f35b8180156100e357600080fd5b506100fe60048036038101906100f9919061278d565b6107a9565b60405161010b919061389c565b60405180910390f35b81801561012057600080fd5b5061013b600480360381019061013691906128f5565b6109af565b005b81801561014957600080fd5b50610164600480360381019061015f91906127b6565b611038565b005b81801561017257600080fd5b5061018d6004803603810190610188919061281d565b611106565b005b8261019a81336113df565b6101d9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101d090613a0f565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168460090160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461026c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610263906139cf565b60405180910390fd5b8360070160009054906101000a900460ff16156102be576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102b5906139af565b60405180910390fd5b61031a8460040180548060200260200160405190810160405280929190818152602001828054801561030f57602002820191906000526020600020905b8154815260200190600101908083116102fb575b505050505083611486565b50338460090160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508184600a01908051906020019061037692919061233f565b5061040e84600b01548560030180548060200260200160405190810160405280929190818152602001828054801561040357602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116103b9575b505050505033611569565b84600b01819055503373ffffffffffffffffffffffffffffffffffffffff16837f34e0a420d35b96a64fd3d7880cc783398690838d03390ce24bd21575684acaec8460405161045d919061387a565b60405180910390a350505050565b60008661047881336113df565b6104b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104ae90613a0f565b60405180910390fd5b8760070160009054906101000a900460ff161561066b576000808773ffffffffffffffffffffffffffffffffffffffff1663995e43398b600801546040518263ffffffff1660e01b815260040161050e9190613bec565b60006040518083038186803b15801561052657600080fd5b505afa15801561053a573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061056391906126e9565b5050915091506001151581151514156105b1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105a890613aaf565b60405180910390fd5b6001151582151514156105f9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105f0906139ef565b60405180910390fd5b8773ffffffffffffffffffffffffffffffffffffffff1663c87e3ae98b600801546040518263ffffffff1660e01b81526004016106369190613bec565b600060405180830381600087803b15801561065057600080fd5b505af1158015610664573d6000803e3d6000fd5b5050505050505b6060610679898787876115e7565b90508673ffffffffffffffffffffffffffffffffffffffff1663c817592d64746a5288008b6000015467f000000000000000600a60338f600201886040518863ffffffff1660e01b81526004016106d697969594939291906138d2565b602060405180830381600087803b1580156106f057600080fd5b505af1158015610704573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610728919061299c565b896008018190555060018960070160006101000a81548160ff0219169083151502179055503373ffffffffffffffffffffffffffffffffffffffff168960080154897f6497d240617a989af47b506f56eda4e218cca6d82a2e20cadf15378fcb7eba7360405160405180910390a48860080154925050509695505050505050565b6000816107b681336113df565b6107f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107ec90613a0f565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168360090160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610889576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161088090613b8f565b60405180910390fd5b8260070160009054906101000a900460ff16156108db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108d2906139af565b60405180910390fd5b61097283600b01548460030180548060200260200160405190810160405280929190818152602001828054801561096757602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161091d575b505050505033611569565b83600b01819055506000600184600301805490506001901b0390508084600b015414156109a35760019250506109a9565b60009250505b50919050565b866109ba81336113df565b6109f9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109f090613a0f565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168860090160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610a8c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a8390613b4f565b60405180910390fd5b8760070160009054906101000a900460ff1615610ade576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ad590613aef565b60405180910390fd5b87600601805490508614610b27576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b1e90613b0f565b60405180910390fd5b60008260ff1660020a905060006001826001898990500381610b4557fe5b0401905060608167ffffffffffffffff81118015610b6257600080fd5b50604051908082528060200260200182016040528015610b915781602001602082028036833780820191505090505b5090506001821115610d5d57606060088481610ba957fe5b0467ffffffffffffffff81118015610bc057600080fd5b50604051908082528060200260200182016040528015610bef5781602001602082028036833780820191505090505b50905060008060005b60018603811015610d58578192508683019150610c188c8c858588611843565b60008a73ffffffffffffffffffffffffffffffffffffffff16634891ea368b876040518363ffffffff1660e01b8152600401610c55929190613c07565b602060405180830381600087803b158015610c6f57600080fd5b505af1158015610c83573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ca79190612764565b90508a73ffffffffffffffffffffffffffffffffffffffff1663833459bc826040518263ffffffff1660e01b8152600401610ce291906138b7565b60206040518083038186803b158015610cfa57600080fd5b505afa158015610d0e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d32919061299c565b868381518110610d3e57fe5b602002602001018181525050508080600101915050610bf8565b505050505b60008360018403029050600089899050905060006001600860018585030381610d8257fe5b0401905060608167ffffffffffffffff81118015610d9f57600080fd5b50604051908082528060200260200182016040528015610dce5781602001602082028036833780820191505090505b509050610dde8c8c868685611843565b60008a73ffffffffffffffffffffffffffffffffffffffff16634891ea368b846040518363ffffffff1660e01b8152600401610e1b929190613c07565b602060405180830381600087803b158015610e3557600080fd5b505af1158015610e49573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e6d9190612764565b90508a73ffffffffffffffffffffffffffffffffffffffff1663833459bc826040518263ffffffff1660e01b8152600401610ea891906138b7565b60206040518083038186803b158015610ec057600080fd5b505afa158015610ed4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ef8919061299c565b866001890381518110610f0757fe5b6020026020010181815250505050505050610f2061238c565b60405180606001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020014281526020018381525090508b60060181908060018154018082558091505060019003906000526020600020906003020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550602082015181600101556040820151816002019080519060200190610fee92919061233f565b505050898b7f79f44a39d2c5ec3c3604318640c97b96ef617fb47640d9684f25f9a0220a4605836040516110229190613baf565b60405180910390a3505050505050505050505050565b60006110968460040180548060200260200160405190810160405280929190818152602001828054801561108b57602002820191906000526020600020905b815481526020019060010190808311611077575b505050505083611486565b90508360030160006110a891906123c3565b8360040160006110b891906123e4565b8360060160006110c89190612405565b827f9910c25b3fd8811e0cf1e96cf6bfdac33e76229ba774595c2aefd46f44433aff836040516110f8919061387a565b60405180910390a250505050565b8260070160009054906101000a900460ff16611157576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161114e90613a6f565b60405180910390fd5b60008060608373ffffffffffffffffffffffffffffffffffffffff1663995e433987600801546040518263ffffffff1660e01b81526004016111999190613bec565b60006040518083038186803b1580156111b157600080fd5b505afa1580156111c5573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906111ee91906126e9565b935050925092508115611236576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161122d9061398f565b60405180910390fd5b82611276576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161126d90613a2f565b60405180910390fd5b8560030180549050602002815110156112c4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112bb90613a4f565b60405180910390fd5b6060866003018054905067ffffffffffffffff811180156112e457600080fd5b506040519080825280602002602001820160405280156113135781602001602082028036833780820191505090505b50905060005b876003018054905081101561135b576000602084019350835190508083838151811061134157fe5b602002602001018181525050508080600101915050611319565b50611367878783611038565b8473ffffffffffffffffffffffffffffffffffffffff1663c87e3ae988600801546040518263ffffffff1660e01b81526004016113a49190613bec565b600060405180830381600087803b1580156113be57600080fd5b505af11580156113d2573d6000803e3d6000fd5b5050505050505050505050565b600080600090505b836003018054905081101561147a5783600301818154811061140557fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561146d576001915050611480565b80806001019150506113e7565b50600090505b92915050565b600081518351146114cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114c390613acf565b60405180910390fd5b60008060005b8551811015611518578581815181106114e757fe5b6020026020010151830192508481815181106114ff57fe5b60200260200101518201915080806001019150506114d2565b508082101561155c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161155390613b2f565b60405180910390fd5b8082039250505092915050565b600080600090505b83518110156115dc5783818151811061158657fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156115cf57806001901b851794506115dc565b8080600101915050611571565b508390509392505050565b606080600567ffffffffffffffff8111801561160257600080fd5b5060405190808252806020026020018201604052801561163c57816020015b611629612429565b8152602001906001900390816116215790505b5090506116ed866001018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156116da5780601f106116af576101008083540402835291602001916116da565b820191906000526020600020905b8154815290600101906020018083116116bd57829003601f168201915b505050505067a000000000000000611cb6565b816000815181106116fa57fe5b602002602001018190525060608660030180549050876003018860040160405160200161172993929190613845565b604051602081830303815290604052905061174c8167b000000000000000611cb6565b8260018151811061175957fe5b6020026020010181905250611777878667c000000000000000611d5a565b8260028151811061178457fe5b60200260200101819052506117a48787878767d000000000000000611fc4565b826003815181106117b157fe5b60200260200101819052506060338860090160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1689600a016040516020016117fa939291906137ca565b604051602081830303815290604052905061181d8167e000000000000000611cb6565b8360048151811061182a57fe5b6020026020010181905250829350505050949350505050565b828211611885576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161187c9061394f565b60405180910390fd5b6000831015801561189857508484905083105b6118d7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118ce90613b6f565b60405180910390fd5b6000821180156118ea5750848490508211155b611929576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119209061396f565b60405180910390fd5b60008383039050600060016008600184038161194157fe5b04019050600060016020600185038161195657fe5b040190506000600884600885020302905082855110156119ab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119a290613a8f565b60405180910390fd5b606089898080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509050878101905060005b60018403811015611b895760006020830192508251905080886000600485020181518110611a2657fe5b602002602001019077ffffffffffffffffffffffffffffffffffffffffffffffff1916908177ffffffffffffffffffffffffffffffffffffffffffffffff191681525050604081901b886001600485020181518110611a8157fe5b602002602001019077ffffffffffffffffffffffffffffffffffffffffffffffff1916908177ffffffffffffffffffffffffffffffffffffffffffffffff191681525050608081901b886002600485020181518110611adc57fe5b602002602001019077ffffffffffffffffffffffffffffffffffffffffffffffff1916908177ffffffffffffffffffffffffffffffffffffffffffffffff19168152505060c081901b886003600485020181518110611b3757fe5b602002602001019077ffffffffffffffffffffffffffffffffffffffffffffffff1916908177ffffffffffffffffffffffffffffffffffffffffffffffff1916815250505080806001019150506119fc565b5060006020820191508151905060006004600186030290505b60018603811015611c125781888281518110611bba57fe5b602002602001019077ffffffffffffffffffffffffffffffffffffffffffffffff1916908177ffffffffffffffffffffffffffffffffffffffffffffffff191681525050604082901b91508080600101915050611ba2565b50600083848377ffffffffffffffffffffffffffffffffffffffffffffffff1916901c77ffffffffffffffffffffffffffffffffffffffffffffffff1916901b905080886001880381518110611c6457fe5b602002602001019077ffffffffffffffffffffffffffffffffffffffffffffffff1916908177ffffffffffffffffffffffffffffffffffffffffffffffff191681525050505050505050505050505050565b611cbe612429565b600060059050602084511115611cdb57611cd884516122d1565b90505b6040518061010001604052808467ffffffffffffffff1681526020018260ff1681526020018581526020016040518060200160405280600081525081526020016000801b8152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000151581526020016000151581525091505092915050565b611d62612429565b6060846006018054905067ffffffffffffffff81118015611d8257600080fd5b50604051908082528060200260200182016040528015611db15781602001602082028036833780820191505090505b5090506060856006018054905067ffffffffffffffff81118015611dd457600080fd5b50604051908082528060200260200182016040528015611e035781602001602082028036833780820191505090505b5090506060866006018054905067ffffffffffffffff81118015611e2657600080fd5b50604051908082528060200260200182016040528015611e555781602001602082028036833780820191505090505b50905060005b8760060180549050811015611f7b57876006018181548110611e7957fe5b906000526020600020906003020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16848281518110611eb757fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050876006018181548110611f0057fe5b906000526020600020906003020160010154838281518110611f1e57fe5b6020026020010181815250508660ff1660020a886006018281548110611f4057fe5b90600052602060002090600302016002018054905002828281518110611f6257fe5b6020026020010181815250508080600101915050611e5b565b5060608760060180549050848484604051602001611f9c9493929190613803565b6040516020818303038152906040529050611fb78187611cb6565b9450505050509392505050565b611fcc612429565b6000805b876006018054905081101561201457876006018181548110611fee57fe5b906000526020600020906003020160020180549050820191508080600101915050611fd0565b506000612020826122d1565b905060008160ff16600167ffffffffffffffff16901b905060608167ffffffffffffffff1667ffffffffffffffff8111801561205b57600080fd5b5060405190808252806020026020018201604052801561208a5781602001602082028036833780820191505090505b5090506000805b8b6006018054905081101561216d5760608c60060182815481106120b157fe5b906000526020600020906003020160020180548060200260200160405190810160405280929190818152602001828054801561210c57602002820191906000526020600020905b8154815260200190600101908083116120f8575b5050505050905060005b815181101561215e5781818151811061212b57fe5b602002602001015185858060010196508151811061214557fe5b6020026020010181815250508080600101915050612116565b50508080600101915050612091565b505b8267ffffffffffffffff168110156121a5578782828060010193508151811061219457fe5b60200260200101818152505061216f565b60008a73ffffffffffffffffffffffffffffffffffffffff1663a1ddff268b856040518363ffffffff1660e01b81526004016121e2929190613c37565b602060405180830381600087803b1580156121fc57600080fd5b505af1158015612210573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122349190612764565b90506000858b0190506040518061010001604052808a67ffffffffffffffff1681526020018260ff168152602001604051806020016040528060008152508152602001604051806020016040528060008152508152602001838152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000151581526020016001151581525097505050505050505095945050505050565b60008060009050600083905060006001808316149050600182901c91505b6000821115612327578260010192506001821415801561231157506001808316145b1561231b57600190505b600182901c91506122ef565b8015612334578260010192505b829350505050919050565b82805482825590600052602060002090810192821561237b579160200282015b8281111561237a57825182559160200191906001019061235f565b5b5090506123889190612498565b5090565b6040518060600160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001606081525090565b50805460008255906000526020600020908101906123e19190612498565b50565b50805460008255906000526020600020908101906124029190612498565b50565b508054600082556003029060005260206000209081019061242691906124b5565b50565b604051806101000160405280600067ffffffffffffffff168152602001600060ff168152602001606081526020016060815260200160008019168152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000151581526020016000151581525090565b5b808211156124b1576000816000905550600101612499565b5090565b5b8082111561250757600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905560018201600090556002820160006124fe91906123e4565b506003016124b6565b5090565b60008151905061251a81614108565b92915050565b600082601f83011261253157600080fd5b813561254461253f82613c98565b613c67565b9150818183526020840193506020810190508385602084028201111561256957600080fd5b60005b83811015612599578161257f88826126aa565b84526020840193506020830192505060018101905061256c565b5050505092915050565b6000815190506125b28161411f565b92915050565b6000815190506125c781614136565b92915050565b60008083601f8401126125df57600080fd5b8235905067ffffffffffffffff8111156125f857600080fd5b60208301915083600182028301111561261057600080fd5b9250929050565b600082601f83011261262857600080fd5b815161263b61263682613cc4565b613c67565b9150808252602083016020830185838301111561265757600080fd5b612662838284613ff9565b50505092915050565b60008135905061267a8161414d565b92915050565b60008135905061268f81614164565b92915050565b6000813590506126a48161417b565b92915050565b6000813590506126b981614192565b92915050565b6000815190506126ce81614192565b92915050565b6000813590506126e3816141a9565b92915050565b600080600080608085870312156126ff57600080fd5b600061270d878288016125a3565b945050602061271e878288016125a3565b935050604061272f8782880161250b565b925050606085015167ffffffffffffffff81111561274c57600080fd5b61275887828801612617565b91505092959194509250565b60006020828403121561277657600080fd5b6000612784848285016125b8565b91505092915050565b60006020828403121561279f57600080fd5b60006127ad84828501612695565b91505092915050565b6000806000606084860312156127cb57600080fd5b60006127d986828701612695565b93505060206127ea868287016126aa565b925050604084013567ffffffffffffffff81111561280757600080fd5b61281386828701612520565b9150509250925092565b60008060006060848603121561283257600080fd5b600061284086828701612695565b9350506020612851868287016126aa565b92505060406128628682870161266b565b9150509250925092565b60008060008060008060c0878903121561288557600080fd5b600061289389828a01612695565b96505060206128a489828a016126aa565b95505060406128b589828a0161266b565b94505060606128c689828a01612680565b93505060806128d789828a016126d4565b92505060a06128e889828a016126aa565b9150509295509295509295565b600080600080600080600060c0888a03121561291057600080fd5b600061291e8a828b01612695565b975050602061292f8a828b016126aa565b96505060406129408a828b016126aa565b955050606088013567ffffffffffffffff81111561295d57600080fd5b6129698a828b016125cd565b9450945050608061297c8a828b01612680565b92505060a061298d8a828b016126d4565b91505092959891949750929550565b6000602082840312156129ae57600080fd5b60006129bc848285016126bf565b91505092915050565b60006129d18383612a68565b60208301905092915050565b60006129e98383612a77565b60208301905092915050565b6000612a018383612e53565b60208301905092915050565b6000612a198383613643565b905092915050565b6000612a2d838361374a565b60208301905092915050565b6000612a458383613777565b60208301905092915050565b612a62612a5d82613ec2565b614072565b82525050565b612a7181613eb0565b82525050565b612a8081613eb0565b82525050565b612a97612a9282613eb0565b614060565b82525050565b6000612aa882613d5e565b612ab28185613e0a565b9350612abd83613cf4565b8060005b83811015612aee578151612ad588826129dd565b9750612ae083613dab565b925050600181019050612ac1565b5085935050505092915050565b6000612b0682613d69565b612b108185613df9565b9350612b1b83613d04565b8060005b83811015612b5357612b30826140aa565b612b3a88826129c5565b9750612b4583613db8565b925050600181019050612b1f565b5085935050505092915050565b6000612b6b82613d69565b612b758185613e0a565b9350612b8083613d04565b8060005b83811015612bb857612b95826140aa565b612b9f88826129dd565b9750612baa83613db8565b925050600181019050612b84565b5085935050505092915050565b6000612bd082613d74565b612bda8185613e15565b9350612be583613d19565b8060005b83811015612c16578151612bfd88826129f5565b9750612c0883613dc5565b925050600181019050612be9565b5085935050505092915050565b6000612c2e82613d7f565b612c388185613e26565b935083602082028501612c4a85613d29565b8060005b85811015612c865784840389528151612c678582612a0d565b9450612c7283613dd2565b925060208a01995050600181019050612c4e565b50829750879550505050505092915050565b6000612ca382613d8a565b612cad8185613e37565b9350612cb883613d39565b8060005b83811015612ce9578151612cd08882612a21565b9750612cdb83613ddf565b925050600181019050612cbc565b5085935050505092915050565b6000612d0182613d8a565b612d0b8185613e48565b9350612d1683613d39565b8060005b83811015612d47578151612d2e8882612a21565b9750612d3983613ddf565b925050600181019050612d1a565b5085935050505092915050565b6000612d5f82613d8a565b612d698185613e59565b9350612d7483613d39565b8060005b83811015612da5578151612d8c8882612a39565b9750612d9783613ddf565b925050600181019050612d78565b5085935050505092915050565b6000612dbd82613d95565b612dc78185613e59565b9350612dd283613d49565b8060005b83811015612e0a57612de7826140bd565b612df18882612a39565b9750612dfc83613dec565b925050600181019050612dd6565b5085935050505092915050565b612e2081613ed4565b82525050565b612e2f81613ed4565b82525050565b612e3e81613ee0565b82525050565b612e4d81613ee0565b82525050565b612e5c81613eea565b82525050565b6000612e6d82613da0565b612e778185613e64565b9350612e87818560208601613ff9565b612e90816140d0565b840191505092915050565b612ea481613f9f565b82525050565b612eb381613fb1565b82525050565b612ec281613fc3565b82525050565b612ed181613fd5565b82525050565b6000612ee4602583613e75565b91507f656e6420696e6465782073686f756c64206265206c6172676572207468616e2060008301527f73746172740000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000612f4a601783613e75565b91507f656e6420696e646578206f7574206f6620626f756e64730000000000000000006000830152602082019050919050565b6000612f8a603283613e75565b91507f47616d6520766572696669636174696f6e20726573756c7420686173206e6f7460008301527f206265656e20636f6d70757465642079657400000000000000000000000000006020830152604082019050919050565b6000612ff0603e83613e75565b91507f47616d6520686173206265656e206368616c6c656e67656420616e642061207660008301527f6572696669636174696f6e20686173206265656e2072657175657374656400006020830152604082019050919050565b6000613056605c83613e75565b91507f526573756c742068617320616c7265616479206265656e20636c61696d65642060008301527f666f7220746869732067616d653a206974206d757374206e6f7720626520656960208301527f7468657220636f6e6669726d6564206f72206368616c6c656e676564000000006040830152606082019050919050565b60006130e2602c83613e75565b91507f47616d6520766572696669636174696f6e2068617320616c726561647920626560008301527f656e20706572666f726d656400000000000000000000000000000000000000006020830152604082019050919050565b6000613148602783613e75565b91507f506c61796572206973206e6f742070617274696369706174696e6720696e207460008301527f68652067616d65000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006131ae602683613e75565b91507f47616d6520766572696669636174696f6e20726573756c74206e6f742061766160008301527f696c61626c6500000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000613214605283613e75565b91507f47616d6520766572696669636174696f6e20726573756c7420697320696e766160008301527f6c69643a2073686f756c642068617665206f6e652075696e743235362076616c60208301527f756520666f72206561636820706c6179657200000000000000000000000000006040830152606082019050919050565b60006132a0602883613e75565b91507f47616d6520766572696669636174696f6e20686173206e6f74206265656e207260008301527f65717565737465640000000000000000000000000000000000000000000000006020830152604082019050919050565b6000613306603083613e75565b91507f6f757470757420627566666572206973206e6f74206c6172676520656e6f756760008301527f6820746f20686f6c6420726573756c74000000000000000000000000000000006020830152604082019050919050565b600061336c602583613e75565b91507f47616d6520766572696669636174696f6e20616c726561647920696e2070726f60008301527f67726573730000000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006133d2604983613e75565b91507f526573756c74696e672066756e647320646973747269627574696f6e20646f6560008301527f73206e6f74206d61746368206e756d626572206f6620706c617965727320696e60208301527f207468652067616d6500000000000000000000000000000000000000000000006040830152606082019050919050565b600061345e601d83613e75565b91507f47616d6520766572696669636174696f6e20696e2070726f67726573730000006000830152602082019050919050565b600061349e602083613e75565b91507f496e76616c6964207475726e207375626d697373696f6e2073657175656e63656000830152602082019050919050565b60006134de604e83613e75565b91507f526573756c74696e672066756e647320646973747269627574696f6e2065786360008301527f6565647320616d6f756e74206c6f636b65642062792074686520706c6179657260208301527f7320666f72207468652067616d650000000000000000000000000000000000006040830152606082019050919050565b600061356a601983613e75565b91507f47616d6520656e6420686173206265656e20636c61696d6564000000000000006000830152602082019050919050565b60006135aa601983613e75565b91507f737461727420696e646578206f7574206f6620626f756e6473000000000000006000830152602082019050919050565b60006135ea602d83613e75565b91507f526573756c7420686173206e6f74206265656e20636c61696d656420666f722060008301527f746869732067616d6520796574000000000000000000000000000000000000006020830152604082019050919050565b60006101008301600083015161365c600086018261379d565b50602083015161366f60208601826137bb565b50604083015184820360408601526136878282612e62565b915050606083015184820360608601526136a18282612e62565b91505060808301516136b66080860182612e35565b5060a08301516136c960a0860182612a68565b5060c08301516136dc60c0860182612e17565b5060e08301516136ef60e0860182612e17565b508091505092915050565b60006060830160008301516137126000860182612a68565b506020830151613725602086018261374a565b506040830151848203604086015261373d8282612c98565b9150508091505092915050565b61375381613f64565b82525050565b61376281613f64565b82525050565b61377181613f64565b82525050565b61378081613f64565b82525050565b61379761379282613f6e565b614096565b82525050565b6137a681613f7e565b82525050565b6137b581613fe7565b82525050565b6137c481613f92565b82525050565b60006137d68286612a51565b6014820191506137e68285612a86565b6014820191506137f68284612db2565b9150819050949350505050565b600061380f8287613786565b60048201915061381f8286612a9d565b915061382b8285612d54565b91506138378284612d54565b915081905095945050505050565b60006138518286613786565b6004820191506138618285612b60565b915061386d8284612db2565b9150819050949350505050565b600060208201905081810360008301526138948184612cf6565b905092915050565b60006020820190506138b16000830184612e26565b92915050565b60006020820190506138cc6000830184612e44565b92915050565b600060e0820190506138e7600083018a612eb9565b6138f46020830189612e44565b6139016040830188612eaa565b61390e6060830187612e9b565b61391b6080830186612ec8565b81810360a083015261392d8185612afb565b905081810360c08301526139418184612c23565b905098975050505050505050565b6000602082019050818103600083015261396881612ed7565b9050919050565b6000602082019050818103600083015261398881612f3d565b9050919050565b600060208201905081810360008301526139a881612f7d565b9050919050565b600060208201905081810360008301526139c881612fe3565b9050919050565b600060208201905081810360008301526139e881613049565b9050919050565b60006020820190508181036000830152613a08816130d5565b9050919050565b60006020820190508181036000830152613a288161313b565b9050919050565b60006020820190508181036000830152613a48816131a1565b9050919050565b60006020820190508181036000830152613a6881613207565b9050919050565b60006020820190508181036000830152613a8881613293565b9050919050565b60006020820190508181036000830152613aa8816132f9565b9050919050565b60006020820190508181036000830152613ac88161335f565b9050919050565b60006020820190508181036000830152613ae8816133c5565b9050919050565b60006020820190508181036000830152613b0881613451565b9050919050565b60006020820190508181036000830152613b2881613491565b9050919050565b60006020820190508181036000830152613b48816134d1565b9050919050565b60006020820190508181036000830152613b688161355d565b9050919050565b60006020820190508181036000830152613b888161359d565b9050919050565b60006020820190508181036000830152613ba8816135dd565b9050919050565b60006020820190508181036000830152613bc981846136fa565b905092915050565b6000602082019050613be66000830184613768565b92915050565b6000602082019050613c016000830184613759565b92915050565b6000604082019050613c1c60008301856137ac565b8181036020830152613c2e8184612bc5565b90509392505050565b6000604082019050613c4c60008301856137ac565b8181036020830152613c5e8184612cf6565b90509392505050565b6000604051905081810181811067ffffffffffffffff82111715613c8e57613c8d6140a8565b5b8060405250919050565b600067ffffffffffffffff821115613cb357613cb26140a8565b5b602082029050602081019050919050565b600067ffffffffffffffff821115613cdf57613cde6140a8565b5b601f19601f8301169050602081019050919050565b6000819050602082019050919050565b60008190508160005260206000209050919050565b6000819050602082019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b60008190508160005260206000209050919050565b600081519050919050565b600081549050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081549050919050565b600081519050919050565b6000602082019050919050565b6000600182019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000600182019050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000613ebb82613f44565b9050919050565b6000613ecd82613f44565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffffffffffff00000000000000000000000000000000000000000000000082169050919050565b6000613f2182613eb0565b9050919050565b6000613f3382613eb0565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b600060ff82169050919050565b6000613faa82613f92565b9050919050565b6000613fbc82613f7e565b9050919050565b6000613fce82613f64565b9050919050565b6000613fe082613f64565b9050919050565b6000613ff282613f92565b9050919050565b60005b83811015614017578082015181840152602081019050613ffc565b83811115614026576000848401525b50505050565b600061403f61403a836140fb565b613e86565b9050919050565b6000614059614054836140fb565b613ea6565b9050919050565b600061406b82614084565b9050919050565b600061407d82614084565b9050919050565b600061408f826140ee565b9050919050565b60006140a1826140e1565b9050919050565bfe5b60006140b6825461402c565b9050919050565b60006140c98254614046565b9050919050565b6000601f19601f8301169050919050565b60008160e01b9050919050565b60008160601b9050919050565b60008160001c9050919050565b61411181613eb0565b811461411c57600080fd5b50565b61412881613ed4565b811461413357600080fd5b50565b61413f81613ee0565b811461414a57600080fd5b50565b61415681613f16565b811461416157600080fd5b50565b61416d81613f28565b811461417857600080fd5b50565b61418481613f3a565b811461418f57600080fd5b50565b61419b81613f64565b81146141a657600080fd5b50565b6141b281613f92565b81146141bd57600080fd5b5056fea264697066735822122056aa8b0b8b86964c0ca6a048659a85aed620e4514aa21e316a3daed7ffc4bb3d64736f6c63430007040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "applyResult(GameContext storage,uint256,uint256[])": {
        "params": {
          "_context": "game context",
          "_fundsShare": "result of the game given as a distribution of the funds previously locked",
          "_index": "index identifying the game"
        }
      },
      "applyVerificationResult(GameContext storage,uint256,DescartesInterface)": {
        "params": {
          "_context": "game context",
          "_descartes": "Descartes instance used for triggering verified computations",
          "_index": "index identifying the game"
        }
      },
      "challengeGame(GameContext storage,uint256,DescartesInterface,Logger,uint8,uint256)": {
        "params": {
          "_context": "game context",
          "_descartes": "Descartes instance used for triggering verified computations",
          "_index": "index identifying the game",
          "_logger": "Logger instance used for storing data in the event history",
          "_turnChunkLog2Size": "turn data log2size considering 64-bit words (i.e., how many 64-bit words are there in a chunk of turn data)"
        },
        "returns": {
          "_0": "index of the Descartes computation"
        }
      },
      "claimResult(GameContext storage,uint256,uint256[])": {
        "params": {
          "_context": "game context",
          "_fundsShare": "result of the game given as a distribution of the funds previously locked",
          "_index": "index identifying the game"
        }
      },
      "confirmResult(GameContext storage)": {
        "params": {
          "_context": "game context"
        },
        "returns": {
          "_isConsensus": "boolean indicating whether all players have agreed with the claim"
        }
      },
      "submitTurn(GameContext storage,uint256,uint256,bytes,Logger,uint8)": {
        "params": {
          "_context": "game context",
          "_data": "game-specific turn data (array of 64-bit words)",
          "_index": "index identifying the game",
          "_logger": "Logger instance used for storing data in the event history",
          "_turnChunkLog2Size": "turn data log2size considering 64-bit words (i.e., how many 64-bit words are there in a chunk of turn data)",
          "_turnIndex": "a sequential number for the turn, which must be equal to the last submitted turn's index + 1"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "applyResult(GameContext storage,uint256,uint256[])": {
        "notice": "Applies the results of a game, transferring locked funds according to the provided distribution"
      },
      "applyVerificationResult(GameContext storage,uint256,DescartesInterface)": {
        "notice": "Applies the result of a game verified by Descartes, transferring funds according to the Descartes computation output"
      },
      "challengeGame(GameContext storage,uint256,DescartesInterface,Logger,uint8,uint256)": {
        "notice": "Challenges game state, triggering a verification by a Descartes computation"
      },
      "claimResult(GameContext storage,uint256,uint256[])": {
        "notice": "Claims game has ended with the provided result (share of locked funds)"
      },
      "confirmResult(GameContext storage)": {
        "notice": "Confirms game results previously claimed"
      },
      "submitTurn(GameContext storage,uint256,uint256,bytes,Logger,uint8)": {
        "notice": "Submits a new turn for a given game"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}