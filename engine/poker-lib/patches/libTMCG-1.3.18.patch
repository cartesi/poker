diff --git a/src/mpz_srandom.cc b/src/mpz_srandom.cc
index 56e82ac..8e71e8d 100644
--- a/src/mpz_srandom.cc
+++ b/src/mpz_srandom.cc
@@ -41,10 +41,17 @@
 	#include <botan/rng.h>
 #endif
 
+static int libtmcg_cartesi_predictable = 0;
+
+void set_libtmcg_cartesi_predictable(int v) {
+    libtmcg_cartesi_predictable = v;
+}
 
 unsigned long int tmcg_mpz_grandom_ui
 	(enum gcry_random_level level)
 {
+    if (libtmcg_cartesi_predictable) return 1;
+
 	unsigned long int tmp = 0;
 	if (level == GCRY_WEAK_RANDOM)
 		gcry_create_nonce((unsigned char*)&tmp, sizeof(tmp));
@@ -179,9 +186,17 @@ void tmcg_mpz_grandomm
 	// make bias negligible cf. BSI TR-02102-1, B.4 Verfahren 2
 	unsigned long int nbytes = (mpz_sizeinbase(m, 2UL) + 64 + 7) / 8;
 	unsigned char tmp[nbytes];
-	gcry_randomize(tmp, nbytes, level);
+
+    if (libtmcg_cartesi_predictable) {
+        for(unsigned long int i=0; i<nbytes; i++) {
+            tmp[i] = (char)i;
+        }
+    } else {
+        gcry_randomize(tmp, nbytes, level);
+    }
 	mpz_import(r, nbytes, 1, 1, 1, 0, (const void*)tmp);
 #ifdef BOTAN
+
 	std::unique_ptr<Botan::RandomNumberGenerator>
 		rng(new Botan::AutoSeeded_RNG);
 	rng->randomize((uint8_t*)tmp, nbytes);
