#ifndef ERRORS_H
#define ERRORS_H

namespace poker {

enum game_error {
    SUCCESS = 0,
    ERR_GAME_OVER,
    ERR_INVALID_MOVE,
    ERR_VTMF_LOAD_FAILED,
    ERR_GENERATE_EVE_KEY,
    ERR_LOAD_ALICE_KEY,
    ERR_LOAD_BOB_KEY,
    ERR_FINALIZE_KEY_GENERATION,
    ERR_VSSHE_GROUP,
    ERR_ALICE_MIX,
    ERR_BOB_MIX,
    ERR_FINAL_MIX,
    ERR_OUT_OF_MEMORY,
    ERR_CREATE_STACK,
    ERR_TAKE_CARDS_FROM_STACK,
    ERR_SELF_PUBLIC_CARD_SECRET,
    ERR_VERIFY_ALICE_PUBLIC_CARD_PROOF,
    ERR_VERIFY_BOB_PUBLIC_CARD_PROOF,
    ERR_OPEN_PUBLIC_CARD,
    ERR_PROVE_MY_PUBLIC_CARDS,
    ERR_PROVE_PRIVATE_CARDS,
    ERR_OPEN_PRIVATE_SELF_SECRET,
    ERR_OPEN_PRIVATE_VERIFY_ALICE_SECRET,
    ERR_OPEN_PRIVATE_VERIFY_BOB_SECRET,
    ERR_OPEN_PRIVATE_OPEN_CARD,
    ERR_OPEN_PUBLIC_SELF_SECRET,
    ERR_OPEN_PUBLIC_VERIFY_ALICE_SECRET,
    ERR_OPEN_PUBLIC_VERIFY_BOB_SECRET,
    ERR_OPEN_PUBLIC_OPEN_CARD,

    // player errors
    PRR_INVALID_FOR_PLAYER,
    PRR_CREATE_VTMF,
    PRR_GENERATE_KEY,
    PRR_LOAD_KEY,
    PRR_FINALIZE_KEY_GENERATION,
    PRR_CREATE_VSSHE,
    PRR_LOAD_EVE_KEY,
    PRR_TAKE_CARDS_FROM_STACK,
    PRR_CREATE_STACK,
    PRR_SHUFFLE_STACK,
    PRR_LOAD_STACK,
    PRR_LOAD_FINAL_STACK,    
    PRR_PROVE_OPPONENT_PRIVATE,
    PRR_PROVE_PUBLIC_CARDS,
    PRR_PROVE_MY_PUBLIC_CARDS,
    PRR_OPEN_MY_PRIVATE_CARDS,

    // solver errors
    SRR_UNKNOWN_CARD,
    SRR_DUPLICATE_CARD,

    // game_state errors
    GRR_INVALID_PLAYER,
    GRR_INSUFFICIENT_FUNDS,
    GRR_BETS_NOT_EQUAL,
    GRR_BET_ALREADY_HIGHER,
    GRR_OPPONENT_BET_NOT_HIGHER,
    GRR_BET_BELOW_MINIMUM,
    GRR_BET_ABOVE_MAXIMUM,
};

#define  POKER_ERROR  -1

} // namespace poker

#endif
